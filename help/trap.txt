trap n [signal ...]
    If the first operand is a decimal unsigned integer, this resets
    all specified signals to the default action, i.e. is the same as
    calling trap with a dash (“-”) as handler, followed by the argu‐
    ments (n [signal ...]), all of which are treated as signals.

trap [handler signal ...]
    Sets a trap handler that is to be executed when any of the speci‐
    fied signals are received.  handler is either an empty string,
    indicating the signals are to be ignored, a dash (“-”), indicating
    that the default action is to be taken for the signals (see
    signal(3)), or a string containing shell commands to be executed
    at the first opportunity (i.e. when the current command completes
    or before printing the next PS1 prompt) after receipt of one of
    the signals.  signal is the name of a signal (e.g. PIPE or ALRM)
    or the number of the signal (see the kill -l command above).

    There are two special signals: EXIT (also known as 0), which is
    executed when the shell is about to exit, and ERR, which is exe‐
    cuted after an error occurs; an error is something that would
    cause the shell to exit if the set -e or set -o errexit option
    were set.  EXIT handlers are executed in the environment of the
    last executed command.

    Note that, for non-interactive shells, the trap handler cannot be
    changed for signals that were ignored when the shell started.

    With no arguments, the current state of the traps that have been
    set since the shell started is shown as a series of trap commands.
    Note that the output of trap cannot be usefully piped to another
    process (an artifact of the fact that traps are cleared when sub‐
    processes are created).

    The original Korn shell's DEBUG trap and the handling of ERR and
    EXIT traps in functions are not yet implemented.
